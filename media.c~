#include "LPC17xx.h"                        /* LPC17xx definitions */
#include "type.h"

#include "usb.h"
#include "usbcfg.h"
#include "usbhw.h"
#include "usbcore.h"
#include "usbaudio.h"

#include <stdio.h>                  
#include "GLCD.h"
#include "LED.h"
#include "ADC.h"
#include "KBD.h"

extern  void SystemClockUpdate(void);
extern uint32_t SystemFrequency;  
extern unsigned char computers [];
extern unsigned char jays [];
extern unsigned char toronto [];
uint8_t  Mute;                                 /* Mute State */
uint32_t Volume;                               /* Volume Level */

#define __FI        1                      /* Font index 16x24               */
#define __USE_LCD   0										/* Uncomment to use the LCD */

#if USB_DMA
uint32_t *InfoBuf = (uint32_t *)(DMA_BUF_ADR);
short *DataBuf = (short *)(DMA_BUF_ADR + 4*P_C);
#else
uint32_t InfoBuf[P_C];
short DataBuf[B_S];                         /* Data Buffer */
#endif

uint16_t  DataOut;                              /* Data Out Index */
uint16_t  DataIn;                               /* Data In Index */

uint8_t   DataRun;                              /* Data Stream Run State */
uint16_t  PotVal;                               /* Potenciometer Value */
uint32_t  VUM;                                  /* VU Meter */
uint32_t  Tick;                                 /* Time Tick */

int selector=0;
uint32_t currentDir = 0;

void get_potval (void) {
  uint32_t val;

  LPC_ADC->CR |= 0x01000000;              /* Start A/D Conversion */
  do {
    val = LPC_ADC->GDR;                   /* Read A/D Data Register */
  } while ((val & 0x80000000) == 0);      /* Wait for end of A/D Conversion */
  LPC_ADC->CR &= ~0x01000000;             /* Stop A/D Conversion */
  PotVal = ((val >> 8) & 0xF8) +          /* Extract Potenciometer Value */
           ((val >> 7) & 0x08);
}


/*
 * Timer Counter 0 Interrupt Service Routine
 *   executed each 31.25us (32kHz frequency)
 */

void TIMER0_IRQHandler(void) 
{
  long  val;
  uint32_t cnt;

  if (DataRun) {                            /* Data Stream is running */
    val = DataBuf[DataOut];                 /* Get Audio Sample */
    cnt = (DataIn - DataOut) & (B_S - 1);   /* Buffer Data Count */
    if (cnt == (B_S - P_C*P_S)) {           /* Too much Data in Buffer */
      DataOut++;                            /* Skip one Sample */
    }
    if (cnt > (P_C*P_S)) {                  /* Still enough Data in Buffer */
      DataOut++;                            /* Update Data Out Index */
    }
    DataOut &= B_S - 1;                     /* Adjust Buffer Out Index */
    if (val < 0) VUM -= val;                /* Accumulate Neg Value */
    else         VUM += val;                /* Accumulate Pos Value */
    val  *= Volume;                         /* Apply Volume Level */
    val >>= 16;                             /* Adjust Value */
    val  += 0x8000;                         /* Add Bias */
    val  &= 0xFFFF;                         /* Mask Value */
  } else {
    val = 0x8000;                           /* DAC Middle Point */
  }

  if (Mute) {
    val = 0x8000;                           /* DAC Middle Point */
  }

  LPC_DAC->CR = val & 0xFFC0;             /* Set Speaker Output */

  if ((Tick++ & 0x03FF) == 0) {             /* On every 1024th Tick */
    get_potval();                           /* Get Potenciometer Value */
    if (VolCur == 0x8000) {                 /* Check for Minimum Level */
      Volume = 0;                           /* No Sound */
    } else {
      Volume = VolCur * PotVal;             /* Chained Volume Level */
    }
    val = VUM >> 20;                        /* Scale Accumulated Value */
    VUM = 0;                                /* Clear VUM */
    if (val > 7) val = 7;                   /* Limit Value */
  }

  LPC_TIM0->IR = 1;                         /* Clear Interrupt Flag */
}
void startScreen(void){
GLCD_Init();
GLCD_Clear(Blue);                         /* Clear graphical LCD display   */
GLCD_SetBackColor(Blue);
GLCD_SetTextColor(White);
GLCD_DisplayString(4, 0, __FI, "      MP3 player    ");
GLCD_DisplayString(5, 0, __FI, "    Photo Gallery   ");
GLCD_DisplayString(6, 0, __FI, "        Games       ");
}
void reset(void){
				GLCD_DisplayString(6, 0, __FI, "      EXITING........");
				selector=0;
				startScreen();
}

void startAudio(void){
  volatile uint32_t pclkdiv, pclk;

  /* SystemClockUpdate() updates the SystemFrequency variable */
  SystemClockUpdate();

  LPC_PINCON->PINSEL1 &=~((0x03<<18)|(0x03<<20));  
  /* P0.25, A0.0, function 01, P0.26 AOUT, function 10 */
  LPC_PINCON->PINSEL1 |= ((0x01<<18)|(0x02<<20));

  /* Enable CLOCK into ADC controller */
  LPC_SC->PCONP |= (1 << 12);

  LPC_ADC->CR = 0x00200E04;		/* ADC: 10-bit AIN2 @ 4MHz */
  LPC_DAC->CR = 0x00008000;		/* DAC Output set to Middle Point */

  /* By default, the PCLKSELx value is zero, thus, the PCLK for
  all the peripherals is 1/4 of the SystemFrequency. */
  /* Bit 2~3 is for TIMER0 */
  pclkdiv = (LPC_SC->PCLKSEL0 >> 2) & 0x03;
  switch ( pclkdiv )
  {
	case 0x00:
	default:
	  pclk = SystemFrequency/4;
	break;
	case 0x01:
	  pclk = SystemFrequency;
	break; 
	case 0x02:
	  pclk = SystemFrequency/2;
	break; 
	case 0x03:
	  pclk = SystemFrequency/8;
	break;
  }

  LPC_TIM0->MR0 = pclk/DATA_FREQ - 1;	/* TC0 Match Value 0 */
  LPC_TIM0->MCR = 3;					/* TCO Interrupt and Reset on MR0 */
  LPC_TIM0->TCR = 1;					/* TC0 Enable */
  NVIC_EnableIRQ(TIMER0_IRQn);

  USB_Init();				/* USB Initialization */
  USB_Connect(TRUE);		/* USB Connect */

  /********* The main Function is an endless loop ***********/ 
  while( 1 ); 
}


void gallery(void){
int exit =0;
int galState =0;
while(exit ==0){
	
if(galState==0){
	GLCD_Bitmap (  0,   0, 320,  240, computers);
} else 
if(galState==1){
	GLCD_Bitmap (  32,   24, 256,  192, jays);
} else
if(galState==2){
	GLCD_Bitmap (  10,   8, 300,  224, toronto);
} else {
	galState=0;
}
	
	currentDir=get_button();
	if (currentDir==(KBD_LEFT&KBD_MASK)){
			reset();
			break;
		}
	if (currentDir==(KBD_UP&KBD_MASK)){
			galState++;
			GLCD_Clear(Black);
	
			}
	}
}
void game(void){
	int fill =0;
	GLCD_SetBackColor(Red);
	GLCD_SetTextColor(Cyan);
	while(fill<10){
	GLCD_DisplayString(fill, 0, __FI, "                    ");
	fill++;
	}
	GLCD_DisplayString(6, 0, __FI, "  GAME NOT UPLOADED ");
	while(1){
	currentDir=get_button();
	if (currentDir==(KBD_LEFT&KBD_MASK)){
		reset();
		break;
	}
	}
	
}
int main (void)
{
KBD_Init();
startScreen();
	
while (1) {		/* Initialize graphical LCD (if enabled */
currentDir=get_button();

switch (selector){
	case 0:
		GLCD_SetBackColor(White);
		GLCD_SetTextColor(Yellow);
		GLCD_DisplayString(4, 0, __FI, "      MP3 player    ");
		GLCD_SetBackColor(Blue);
		GLCD_SetTextColor(White);
		GLCD_DisplayString(5, 0, __FI, "    Photo Gallery   ");
		GLCD_DisplayString(6, 0, __FI, "        Games       ");
		break;
	case 1:
		GLCD_SetBackColor(White);
		GLCD_SetTextColor(Yellow);
		GLCD_DisplayString(5, 0, __FI, "    Photo Gallery   ");
		GLCD_SetBackColor(Blue);
		GLCD_SetTextColor(White);
		GLCD_DisplayString(4, 0, __FI, "      MP3 player    ");
		GLCD_DisplayString(6, 0, __FI, "        Games       ");
		break;
	case 2:
		GLCD_SetBackColor(White);
		GLCD_SetTextColor(Yellow);
		GLCD_DisplayString(6, 0, __FI, "        Games       ");
		GLCD_SetBackColor(Blue);
		GLCD_SetTextColor(White);
		GLCD_DisplayString(4, 0, __FI, "      MP3 player    ");
		GLCD_DisplayString(5, 0, __FI, "    Photo Gallery   ");
		break;
	default:
		selector=0;
		break;
}

if (currentDir==(KBD_UP&KBD_MASK )){
			selector--;
		}
if (currentDir==(KBD_DOWN&KBD_MASK )){
			selector++;
		}
if (currentDir==(KBD_RIGHT&KBD_MASK) && selector == 0 ){
			  startAudio();
		}
if (currentDir==(KBD_RIGHT&KBD_MASK) && selector == 1 ){
			  gallery();
		}
if (currentDir==(KBD_RIGHT&KBD_MASK) && selector == 2 ){
			  game();
		}

	}

}
